/*
  RCS:          $Header: /afs/cs.cmu.edu/user/tmwong/Cvs/fscachesim/StoreCacheSimple.cc,v 1.5 2002/02/18 00:23:45 tmwong Exp $
  Author:       T.M. Wong <tmwong+@cs.cmu.edu>
*/

#include <list>
#include <stdio.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif /* HAVE_STDLIB_H */

#include "Block.hh"
#include "IORequest.hh"

#include "StoreCacheSimpleCoop.hh"

using Block::block_t;

/**
 * This cache maintains one ejection queue. The head of the queue is the
 * eject-me-next block. Hence, for LRU and MRU we add blocks at the tail
 * and head respectively.
 */

/*
void
StoreCacheSimpleCoop::BlockCache(const IORequest& inIOReq,
			     const block_t& inBlock_t,
			     list<IORequest>& outIOReqs)
{

LocalBlock::local_block_t inBlock;

  inBlock.data.objID = inBlock_t.objID;
  inBlock.data.blockID = inBlock_t.blockID;

  // See if is read.

if (inIOReq.opGet() == IORequest::Read)
{
 
  bool cacheRead = ReadFromCache(inIOReq, inBlock_t);
 


  // see if block is cooperative
  
  if (cooperative.isCached(inBlock)) {

    cooperative.blockGet(inBlock);
    if (!cacheRead )
    {
       coopHitsPerOrig[inIOReq.origGet()]++; 
       cooperativeHits++;
    }
    inBlock.refNum++;
  }  
  else 
  {
    inBlock.refNum = 1;
  }

  cooperative.blockPutAtTail(inBlock);


}

else if (inIOReq.opGet() == IORequest::Demote)
{

  // see if block is cooperative
  
  if (cooperative.isCached(inBlock)) {

    cooperative.blockGet(inBlock);
    inBlock.refNum--;
  }  

  if (inBlock.refNum > 0)
    cooperative.blockPutAtTail(inBlock);

  DemoteToCache (inIOReq, inBlock_t);
}

}

*/

void
StoreCacheSimpleCoop::BlockCache(const IORequest& inIOReq,
			     const block_t& inBlock_t,
			     list<IORequest>& outIOReqs)
{


  // See if is read.

if (inIOReq.opGet() == IORequest::Read)
{
 
  if (!ReadFromCache(inIOReq, inBlock_t))
    if (cooperative.isCached(inBlock_t))
    {
       coopHitsPerOrig[inIOReq.origGet()]++; 
       cooperativeHits++;
    }
}

else if (inIOReq.opGet() == IORequest::Demote)
{

  DemoteToCache (inIOReq, inBlock_t);
}

}

