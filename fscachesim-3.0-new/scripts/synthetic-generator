#!/usr/bin/perl -w
#
# RCS:         $Header: /afs/cs.cmu.edu/user/tmwong/Cvs/fscachesim/scripts/synthetic-generator,v 1.3 2001/07/05 14:21:34 tmwong Exp $
# Description: Generate a synthetic trace of 1-block read I/Os.
# Author:      T.M. Wong <tmwong+@cs.cmu.edu>

use strict;
use vars qw($glblProgname $opt_f $opt_n $opt_r $opt_z);

use File::Basename;
use Getopt::Std;

$glblProgname = basename($0);

sub usage {
  print "Usage: $glblProgname [VARIABLES]\n\n";
  print "\t-f\t\tfile size in blocks\n";
  print "\t-n\t\tnumber of batches\n";
  print "\t-r\t\tRANDOM workload\n";
  print "\t-z\t\tZIPF workload\n";
  exit(0);
}

# The generic IORequestGenerator in fscachesim expects input of the form:
#
# time objectID offset length

sub IOGenerateRandom {
  my ($interarrivalTime, $totalTime, $blockSize, $fileSize) = @_;

  srand();

  my ($i) = 0;
  while ($i < $totalTime) {
    my ($offset) = int(rand() * $fileSize) * $blockSize;

    print "$i 0 $offset $blockSize\n";

    $i = $i + $interarrivalTime;
  }
}

sub IOGenerateZipf {
  my ($interarrivalTime, $totalTime, $blockSize, $fileSize) = @_;
  my ($normalProb);
  my (@zipfArray);

  # Generate the uniform-Zipf converter.

  $normalProb = 0;
  my ($i);
  for ($i = 0; $i < $fileSize; $i++) {
    my ($prob) = 1 / ($i + 1);

    $normalProb += $prob;

    $zipfArray[$i] = $normalProb;
  }

  # Normalize the probabilities.

  for ($i = 0; $i < $fileSize; $i++) {
    $zipfArray[$i] = $zipfArray[$i] / $normalProb;
  }

  # Now generate the I/Os.

  srand();
  $i = 0;
  while ($i < $totalTime) {
    my ($prob) = rand();

    my ($j);
    for ($j = 0; $prob > $zipfArray[$j]; $j++) {};

    my ($offset) = $j * $blockSize;
    print "$i 0 $offset $blockSize\n";

    $i = $i + $interarrivalTime;
  }
}

# Start of the "main" routine.

getopts('f:n:rz');

if ($opt_r) {
    IOGenerateRandom(1, $opt_f * $opt_n, 4096, $opt_f);
} elsif ($opt_z) {
    IOGenerateZipf(1, $opt_f * $opt_n, 4096, $opt_f);
} else {
    usage();
}
