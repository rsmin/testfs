#include <list>
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif /* HAVE_STDINT_H */
#include <stdio.h>
#include <stdlib.h>


#include <stdint.h>
#include "DemoteStat.hh"
#include "math.h"
#include "util.hh"


DemoteStat::DemoteStat() :
    demoteCount(0),
    demoteNum(0),
    hitNum(0),
    missNum(0),
    blockNum(0),
    hitPerc(0)
{

  for (int i = 0; i < MAXACC; i++)
  {
    for (int j = 0; j < 6; j++)
      freq_stat[i][j] = 0;
    for (int j = 0; j < 5; j++)
      freq_perc[i][j] = 0;
    for (int j = 0; j < 4; j++)
    {
      freq_dist[i][j] = 0; 
      freq_dist_mv[i][j] = 0; 
    }     
    for (int j = 0; j < MAXDIS; j++)
    {
      freq_dist_spec[i][j][0] = 0;  
      freq_dist_spec[i][j][1] = 0; 
      for (int k = 0; j < MAXDIS; j++)
        d_r_dist[i][j][k] = 0;
    } 
  }


}

 
DemoteStat::~DemoteStat()
{ 
  for (list<demote_t *>::iterator iter = demotestat.begin(); iter != demotestat.end(); iter++)
      delete *iter;
    
}

  void
DemoteStat::Calc()
{

    // statistics

      UpdateStat();

    // freq_distance mean and freq_distance

      CalcMandV();

    // freq_perc
      CalcPerc();

}

void
DemoteStat::UpdateStat()
{
  uint64_t ref, logRef, dist, prevdist; 
  bool hasnextdist = false;

  blockNum  = demotestat.size();

  if (blockNum <= 0)
    return; 

  missNum = demoteNum - hitNum;
  hitPerc = (double)hitNum/(double)demoteNum;

  for (list<demote_t *>::iterator iter = demotestat.begin(); iter != demotestat.end(); iter++)
  {

    // freq_data
 
    ref = (*iter)->demoteList.size();
    if (ref > 0) 
       logRef = log2(ref) + 1;
    else
       logRef = 0;

    if (logRef > (MAXACC - 1))
      logRef = MAXACC - 1;
    freq_stat[logRef][0]++;
    freq_stat[logRef][3] = freq_stat[logRef][3] + ref;
    if ((*iter)->demoteList.begin()->hitTime != 0)
    {
       freq_stat[logRef][1]++; 
       freq_stat[logRef][4] = freq_stat[logRef][4] + ref;
    }
    else
    {
       freq_stat[logRef][2]++;  
       freq_stat[logRef][4] = freq_stat[logRef][4] + ref - 1; 
       freq_stat[logRef][5]++; 
    }     

    // freq_distance

    hasnextdist = false;
    for (list<demote_stat_t>::iterator diter = (*iter)->demoteList.begin();
          diter != (*iter)->demoteList.end(); diter++)
    {
        
        if (diter->d_r_Distance > 0)
        {
           dist = diter->d_r_Distance;
           if (dist > 0)
           {
               dist = dist/16;
               if (dist > 0)
                   dist = log2(dist) + 2;
               else 
                   dist = 1;
           }
           if (dist > (MAXDIS - 1))
               dist = MAXDIS - 1;
           freq_dist_spec[logRef][dist][0]++;
 
          // corralated d-r distance
          
          if (hasnextdist)
             d_r_dist[logRef][prevdist][dist]++;

          hasnextdist = true;
          prevdist =  dist;

        }
        else
          hasnextdist = false;

        if (diter->r_d_Distance > 0)
        {
           dist = diter->r_d_Distance;
           if (dist > 0)
           {
               dist = dist/16;
               if (dist > 0)
                   dist = log2(dist) + 2;
               else 
                   dist = 1;
           }

           if (dist > (MAXDIS - 1))
               dist = MAXDIS - 1;
           freq_dist_spec[logRef][dist][1]++;
        }
        
    }


   }
}

void
DemoteStat::CalcPerc()
{
  for (int i = 0; i < MAXACC; i++)
  {
     freq_perc[i][0] = (double)freq_stat[i][0]/(double)blockNum;  
     freq_perc[i][1] = (double)freq_stat[i][3]/(double)demoteNum;
     if  (hitNum > 0)               
        freq_perc[i][2] = (double)freq_stat[i][4]/(double)hitNum;
     if  (missNum > 0)
        freq_perc[i][3] = (double)freq_stat[i][5]/(double)missNum;
     if  (freq_stat[i][3] > 0)
        freq_perc[i][4] = (double)freq_stat[i][4]/(double)freq_stat[i][3];
  }
}

void
DemoteStat::CalcMandV()
{
    // freq_distance mean

      CalcVariance (-1, 0);

    // freq_distance variance

      CalcVariance (0, 1);

    // log normal mean and variance

   uint64_t  dist;
   for (int i = 1; i < MAXACC; i++)
       for (int k = 0; k < 4; k++)
       {
           dist = freq_dist_mv[i][k];
           if (dist > 0)
           {
               dist = dist/16;
               if (dist > 0)
                   dist = log2(dist) + 2;
               else 
                   dist = 1;
           }
           if (dist > (MAXDIS - 1))
               dist = MAXDIS - 1;
           freq_dist_mv[i][k] = dist;
       } 
}
void
DemoteStat::CalcVariance(int mean_pos, int variance_pos)
{
   uint64_t m[2], dist, md, freq; 

   for (int i = 1; i < MAXACC; i++)
   {
     m[0] = 0;
     m[1] = 0;

     for (int j = 1; j < MAXDIS; j++)
     {
        for (int k = 0; k < 2; k++)
        {
           if (freq_dist_spec[i][j][k] > 0)
           {
              freq = freq_dist_spec[i][j][k];

              if (j > 1)
                dist = 16*(uint64_t)pow(2,j-2);
              else 
                dist = j;

              if (mean_pos < 0)
                 md = 0;
              else
                 md = freq_dist_mv[i][mean_pos + k*2];

              if (dist > md)
                dist = dist - md;
              else
                dist = md - dist;
          
              freq_dist_mv[i][variance_pos + k*2] += dist*freq;
              m[k] += freq;
           }
        }     
     }
     for (int k = 0; k < 2; k++)
     {
        if (m[k] > 0)
           freq_dist_mv[i][variance_pos + k*2] = freq_dist_mv[i][variance_pos + k*2]/m[k]; 

     }

   }   
}

  void
DemoteStat::blockDemote(const block_t& inBlock, uint64_t time)
{
  demote_stat_t deBlock;
  demote_t *newDemote;

  demoteNum++;

  DemoteStatIndex::iterator blockIter = demotestatindex.find(inBlock);

  if (blockIter != demotestatindex.end()) {

      newDemote = *(blockIter->second);
 
      if ( newDemote->demoteList.begin()->hitTime != 0)
      {
         newDemote->demoteList.begin()->r_d_Distance =  \
             time - newDemote->demoteList.begin()->hitTime;
      
         deBlock.demoteTime = time; 
         deBlock.hitTime = 0;    
         deBlock.r_d_Distance = 0;  
         deBlock.d_r_Distance = 0; 
   
         newDemote->demoteList.push_front(deBlock);
       }

  }
  else
  {
    newDemote = new demote_t;

    newDemote->objID = inBlock.objID;
    newDemote->blockID = inBlock.blockID;

    deBlock.demoteTime = time; 
    deBlock.hitTime = 0;    
    deBlock.r_d_Distance = 0;  
    deBlock.d_r_Distance = 0; 

    newDemote->demoteList.push_front(deBlock);

    demotestat.push_front(newDemote);
    demotestatindex[inBlock] = demotestat.begin();

    demoteCount++;
  }


};

  bool
DemoteStat::blockRead(const block_t& inBlock, uint64_t time)
{
  bool ret = false;
  DemoteStatIndex::iterator blockIter = demotestatindex.find(inBlock);

  if (blockIter != demotestatindex.end()) {
   
    demote_t *demote = *(blockIter->second);

    if ( demote->demoteList.begin()->hitTime == 0)
    {
      hitNum++;
      demote->demoteList.begin()->hitTime = time;
      demote->demoteList.begin()->d_r_Distance =   \
          time - demote->demoteList.begin()->demoteTime;
      ret = true;
    }
  }
  return ret;

};

  bool
DemoteStat::demotegetHead(demote_t **demoteBlock)
{
  bool ret = false;

  if (!demotestat.empty() )
  {
    *demoteBlock = *demotestat.begin();
    demotestat.pop_front();
    demoteCount--;
    ret = true;
  }
  return ret;

}

