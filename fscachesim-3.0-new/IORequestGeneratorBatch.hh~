/*
  RCS:          $Header: /afs/cs.cmu.edu/user/tmwong/Cvs/fscachesim/IORequestGeneratorBatch.hh,v 1.5 2002/02/15 15:44:25 tmwong Exp $
  Author:       T.M. Wong <tmwong+@cs.cmu.edu>
*/

#ifndef _IOREQUESTGENERATORBATCH_HH_
#define _IOREQUESTGENERATORBATCH_HH_

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */

#include <list>
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif /* HAVE_STDINT_H */

#include "IORequestGenerator.hh"
#include "Statistics.hh"

/**
 * Read I/O requests from multiple generators (with warm-up periods, if
 * desired), and send them off to lower-level storage devices.
 */
class IORequestGeneratorBatch :
  public IORequestGenerator,
  public Statistics
{
private:
  class IORequestGeneratorLessThan:
    public binary_function<IORequestGenerator *, IORequestGenerator *, bool> {
  public:
    bool operator()(const IORequestGenerator *inGenL,
		    const IORequestGenerator *inGenR) {
      return (*inGenL < *inGenR);
    };
  };

  list<IORequestGenerator *> generators;

  list<Statistics *> statistics;
  uint64_t requestsIssued;

  enum {WarmupNone, WarmupCount, WarmupTime} warmupType;
  uint64_t warmupCount;
  double warmupTime;
  bool warmupDoneFlag;

  uint64_t recordsPerDot;

private:
  // Copy constructors: declared private and never defined

  IORequestGeneratorBatch(const IORequestGeneratorBatch&);
  IORequestGeneratorBatch& operator=(const IORequestGeneratorBatch&);

public:
  /**
   * Create a batch I/O request generator.
   */
  IORequestGeneratorBatch() :
    IORequestGenerator(),
    Statistics(""),
    generators(),
    requestsIssued(0),
    warmupType(WarmupNone),
    warmupCount(0),
    warmupTime(0),
    warmupDoneFlag(true),
    recordsPerDot(1000) { ; };

  /**
   * Create a batch I/O request generator with a warm-up period of some
   * number of requests.
   *
   * @param inWarmupCount The number of requests in the warm-up period.
   */
  IORequestGeneratorBatch(uint64_t inWarmupCount) :
    IORequestGenerator(),
    Statistics(""),
    generators(),
    requestsIssued(0),
    warmupType(WarmupCount),
    warmupCount(inWarmupCount),
    warmupTime(0),
    warmupDoneFlag(false),
    recordsPerDot(1000) { ; };

  /**
   * Create a batch I/O request generator with a timed warm-up period.
   *
   * @param inWarmupCount The time of the warm-up period.
   */
  IORequestGeneratorBatch(double inWarmupTime) :
    IORequestGenerator(),
    Statistics(""),
    generators(),
    requestsIssued(0),
    warmupType(WarmupTime),
    warmupCount(0),
    warmupTime(inWarmupTime),
    warmupDoneFlag(false),
    recordsPerDot(1000) { ; };

  /**
   * Destroy the generator.
   */
  virtual ~IORequestGeneratorBatch();

  /**
   * Add a subsidary request generator to the batch.
   *
   * @param inGenerator A pointer to the subsidiary generator.
   */
  void IORequestGeneratorAdd(IORequestGenerator *inGenerator) {
    generators.push_back(inGenerator);
  };

  /**
   * Add a subsidary statistics object to the batch.
   *
   * @param inGenerator A pointer to the subsidiary statistics object.
   */
  void StatisticsAdd(Statistics *inStatistics) {
    statistics.push_back(inStatistics);
  };

  virtual bool IORequestDown();

  // Statistics management

  virtual void statisticsReset();

  virtual void statisticsShow() const;
  virtual void beforeShow() const;
};

#endif /* _IOREQUESTGENERATORBATCH_HH_ */
