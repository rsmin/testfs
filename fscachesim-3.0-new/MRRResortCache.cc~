#include <list>
#include <stdio.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif /* HAVE_STDLIB_H */

#include "MemoryRegion.hh"


#include "MRRResortCache.hh"



void MRRResortCache::EvictCache(uint64_t regsize)
{
    uint64_t resortsize = blockCountMax/5;
    uint64_t evictsize = resortsize/2;

    uint64_t unregsize = 0;

    if (regsize > resortsize)
    {
       return RegCache::EvictCache(regsize);
    }
     
    MemoryRegion::memory_region_t tmpMr; 
    list<MemoryRegion::memory_region_t>::iterator cacheIter;
    for (cacheIter = cache.begin();   
          cacheIter != cache.end() && unregsize < resortsize; cacheIter++)
    {
       unregsize += cacheIter->len;
       if (cacheIter->H == 0)
       {
           tmpMr = *cacheIter;
           cacheIndex.erase(tmpMr); 
           cacheIter->H = L + (double)1/(double)cacheIter->len;
           tmpMr = *cacheIter;
           cacheIndex[tmpMr] = cacheIter;
       }
      
       evictIndex.insert(pair_resort (cacheIter->H, cacheIter));
    }

    unregsize = 0;
    ResortIndex::iterator resIter;

    for (resIter = evictIndex.begin(); resIter != evictIndex.end() && (unregsize < evictsize);
         resIter++) 
    {
         unregsize += resIter->second->len;
         blockCount -= resIter->second->len;
         L = resIter->second->H;

         tmpMr = *(resIter->second);
         cacheIndex.erase(tmpMr);    
         cache.erase(resIter->second); 
    }

    evictIndex.clear();

    totaltime += unregsize*DISREG_PERPAGE + DISREG_PERREG;
    assert(blockCount > 0);

}


